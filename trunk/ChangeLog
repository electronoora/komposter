Release notes for Komposter 2.0 beta 1

The standard GLUT library in MacOS X has some quirks which may be confusing.
Maximizing the window screws up the mouse coordinates, so don't do that.
Also, the application menus and their items (Save As, Print, Preferences)
are generated by GLUT and not particularly useful. I'll look into linking
with a modified GLUT to get rid of those and add mousewheel support.
Quitting the application works both from the menu and by using Cmd-Q.

NOTES WHEN COMPILING FORM SOURCE:

- The Makefile is made for XCode 4.1, but if using 4.0 on Snow Leopard,
  change the CC variable to plain 'gcc'.

- Linux version must be a 32-bit executable, so on Debian and Ubuntu,
  make sure you have ia32-libs-dev -package installed and you should be fine.

- Komposter seems to work properly ONLY with freetype 2.3.x. I've included
  pre-built versions of freetype 2.3.12 for OS X and Linux in the 'resources'
  directory of the source package.

What's new in r??? (? ? 2011):
- autoconf scripts for generic compilation on non-OSX environment
- check for resources in local path first, this allows for using the program
  directly from the source directory without installing

What's new in r384 (aug 17 2011):
- window size increased a bit - still fits comfortably on a 13" macbook
- supersaw oscillator module. a module which combines the output of
  seven sawtooth oscillators, with six of them detuned from the center
  frequency. closely resembles the same feature on roland jp8000/jp8080
  synthesizers. not yet in standalone player code, though.
- added examples on how to use the supersaw oscillator
- 24db/oct LPF works in standalone player code
- intro2011 example song which uses LPF24
- all new player code and converter. generates a LOT more data, but
  needs less code for playback. all in all, the music seems to compress
  now about 4-5% better with a typical LZ compressor.
- can be compiled also on OS X Lion 10.7 (doesn't work with LLVM)


What's new in r346 (dec 27 2010):
- major speed optimization. now easily plays twice the number of channels
  realtime without stuttering. requires at least a core2 cpu. the player
  code still uses x87 instructions instead of SSE.
- changed to triple-buffering in order to fix buffer queuing problems
  with linux.
- added keyboard reference to piano keys on patch page and fixed hovering
  and clicking on black keys.


What's new in r332 (nov 6 2010):
- added real-time song playback to sequencer. set playback start or area
  and either click 'play' or hit spacebar to toggle playback.
- fixed 'select all' behavior in sequencer. now selects only to the end of
  the last pattern
- added keyboard shortcuts for 'select all' (a) and 'clear selection' (c)
  in sequencer
- fixed compatibility with mac os 10.5.x (r314)




Issues requiring resolution before 2.0 rc:
- on page2, closing edit dialog with 'esc' doesn't save the value but
  rightclick (correctly) does
- player doesn't implement supersaw yet
- player doesn't implement delay loop length
- write proper documentation with illustration and examples
- more example synths and patches
- double-check that patch loading works in all cases when rendering
- fix occasional crashing when loading/editing synths with multiple
  delay modules (buffermm.c is a mess)

Known Linux-specific problems:
- smooth lines are broken on intel GMA, looks kinda bad but there's not much
  that can be done.
- small buffersizes can cause stuttering when linux swaps to disk. try to
  set the playback thread to realtime scheduling.




Ideas for future Komposter features:
- song master volume to seq page. converter sets it to samplemul
- a panic key to quickly reset synths, set gates to zero, reset vco and
  env accumulators, clear filter poles
- overwrite confirmation to file save dialogs by requiring two ok-clicks
- scroll pattern when dragging a long note out of the screen
- patch copy/paste (clear clipboard when bank is overwritten)
- set scale to knob/scaler automatically when it is patched to an input
- midi input
- recording patterns from playing on keyboard or midi device
- saving rendered clips as wav files
- copy/paste patterns by dragging on timeline
- show only files with correct extension in file dialogs and sort
  directories to top
- hard restart on/off button in composing mode?
- using convex bezier curves for VCO waveforms?

Ideas which also affect player code:
- force hard restart when new pattern block is started
- optimize player code for better compression with laturi
- oscillator sync
- implement modulator channel commands (set/slide modulator)
- shuffle timing (value greater than 0 increases the duration of the odd-numbered
  steps and decreases the length of the even-numbered steps correspondingly)
- gate timing (gate-off tick selectable, rather than fixed on tick 60)
- note portamento
- pattern tempo multiplier setting (1/4x, 1/2x, 1x, 2x, 4x)
- more lfo waveforms (eg. pulse wave w/ pwm for gating to tempo)
- more module types:
  * audio bus (allow patching audio between channels)
  * sampler (loads a wave file and plays it at CV frequency)
  * envelope follower (can be used to build compressors and vocoders)



Future UI improvements;
  + better keyboard support (more shortcuts, patch editing on keyboard only)
  + click-to-move scrollbars. currently they're drag-only
  + use a glut library which provides mousewheel support
  + node "rotate" to adjust their position to help clear the patch cable mess
  + doubleclicking files to open
  + resizeable main window with button positioning accordingly
  + check the coordinates of all modules after loading a synthesizer from
    disk and adjust them if they fall beyond the screen edges
  + change the bitmap font to one with full latin-1 set
  + use a more readable font in places such as the file requesters

Future player code rewrite;
- update player core to allow polyphony within a synth
  + in synth to channel assign dialog, also allow setting max polyphony
  + player "secretly" creates additional channels to get the desired
    polyphony
  + patterns can have overlapping notes, new notes are assigned to either
    first free voice or one with oldest note still playing
  + multiple keypress detection, translate key up/down callbacks to MIDI
    events
